
import asyncio
import json
import logging
import os
from typing import Dict, List, Optional, Any
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
import openai

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MCPClient:
    def __init__(self, api_key: str, base_url: str = None, model: str = "gpt-4"):
        self.llm = openai.AsyncOpenAI(api_key=api_key, base_url=base_url)
        self.model = model
        self.session: Optional[ClientSession] = None
        self.server_info: Dict[str, Any] = {}
        
    async def connect(self, server_command: List[str]) -> bool:
        """Establish connection with proper lifecycle management"""
        try:
            server_params = StdioServerParameters(
                command=server_command[0], 
                args=server_command[1:]
            )
            
            self.stdio_client = stdio_client(server_params)
            self.read, self.write = await self.stdio_client.__aenter__()
            
            # Initialize session with proper handshake
            self.session = ClientSession(self.read, self.write)
            await self.session.__aenter__()
            
            # Perform initialization handshake
            init_result = await self.session.initialize()
            self.server_info = {
                "name": getattr(init_result, 'serverInfo', {}).get('name', 'Unknown'),
                "version": getattr(init_result, 'serverInfo', {}).get('version', '1.0'),
                "capabilities": getattr(init_result, 'capabilities', {})
            }
            
            logger.info(f"Connected to MCP server: {self.server_info['name']} v{self.server_info['version']}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to connect to MCP server: {e}")
            return False
    
    async def disconnect(self):
        """Proper cleanup and disconnection"""
        try:
            if self.session:
                await self.session.__aexit__(None, None, None)
            if hasattr(self, 'stdio_client'):
                await self.stdio_client.__aexit__(None, None, None)
            logger.info("Disconnected from MCP server")
        except Exception as e:
            logger.error(f"Error during disconnection: {e}")
    
    async def get_capabilities(self) -> Dict[str, List[Any]]:
        """Discover all server capabilities with error handling"""
        capabilities = {"tools": [], "prompts": [], "resources": []}
        
        try:
            # Get tools
            tools_result = await self.session.list_tools()
            capabilities["tools"] = tools_result.tools
            
            # Get prompts (with error handling for servers without prompts)
            try:
                prompts_result = await self.session.list_prompts()
                capabilities["prompts"] = prompts_result.prompts
            except Exception:
                logger.debug("Server doesn't support prompts")
            
            # Get resources (with error handling)
            try:
                resources_result = await self.session.list_resources()
                capabilities["resources"] = resources_result.resources
            except Exception:
                logger.debug("Server doesn't support resources")
                
        except Exception as e:
            logger.error(f"Error getting capabilities: {e}")
            
        return capabilities
    
    async def request_permission(self, action: str, resource: str) -> bool:
        """Explicit user permission for security"""
        response = input(f"\nPermission required: {action} on {resource}. Allow? (y/N): ").strip().lower()
        granted = response in ['y', 'yes']
        logger.info(f"Permission {'granted' if granted else 'denied'} for {action} on {resource}")
        return granted
    
    async def safe_tool_call(self, tool_name: str, arguments: Dict[str, Any]) -> Optional[str]:
        """Secure tool execution with permission checking"""
        if not await self.request_permission("execute tool", tool_name):
            return "Permission denied"
        
        try:
            result = await self.session.call_tool(tool_name, arguments)
            return result.content[0].text if result.content else "No output"
        except Exception as e:
            logger.error(f"Tool execution failed: {e}")
            return f"Error: {str(e)}"
    
    async def safe_prompt_get(self, prompt_name: str, arguments: Dict[str, Any] = None) -> Optional[List[Any]]:
        """Secure prompt retrieval"""
        if not await self.request_permission("access prompt", prompt_name):
            return None
        
        try:
            result = await self.session.get_prompt(prompt_name, arguments or {})
            return result.messages
        except Exception as e:
            logger.error(f"Prompt retrieval failed: {e}")
            return None
    
    async def chat_loop(self):
        """Main interactive loop with proper error handling"""
        capabilities = await self.get_capabilities()
        openai_tools = [self._to_openai_tool(t) for t in capabilities["tools"]]
        
        print(f"\n🤖 Connected to {self.server_info['name']}")
        print("Commands: 'list tools', 'list prompts', 'get prompt <name>', 'quit'")
        print("Or just chat normally!\n")
        
        while True:
            try:
                user_input = input("> ").strip()
                
                if user_input.lower() in ['quit', 'exit']:
                    break
                elif user_input.lower() == 'list tools':
                    await self._list_tools(capabilities["tools"])
                elif user_input.lower() == 'list prompts':
                    await self._list_prompts(capabilities["prompts"])
                elif user_input.lower().startswith('get prompt '):
                    await self._get_prompt(user_input[11:].strip())
                elif user_input:
                    await self._handle_chat(user_input, openai_tools)
                    
            except KeyboardInterrupt:
                print("\n\nExiting...")
                break
            except Exception as e:
                logger.error(f"Unexpected error: {e}")
                print(f"Error: {e}")
    
    async def _handle_chat(self, user_input: str, tools: List[Dict[str, Any]]):
        """Handle LLM chat with tool calling"""
        messages = [{"role": "user", "content": user_input}]
        
        for iteration in range(3):  # Prevent infinite loops
            try:
                response = await self.llm.chat.completions.create(
                    model=self.model,
                    messages=messages,
                    tools=tools,
                    tool_choice="auto"
                )
                
                message = response.choices[0].message
                
                if not message.tool_calls:
                    print(f"\n{message.content}")
                    break
                
                # Add assistant message
                messages.append({
                    "role": "assistant",
                    "content": message.content,
                    "tool_calls": [{"id": tc.id, "type": "function",
                                  "function": {"name": tc.function.name,
                                             "arguments": tc.function.arguments}}
                                 for tc in message.tool_calls]
                })
                
                # Execute tools with security checks
                for tool_call in message.tool_calls:
                    try:
                        args = json.loads(tool_call.function.arguments)
                        content = await self.safe_tool_call(tool_call.function.name, args)
                    except json.JSONDecodeError:
                        content = "Error: Invalid tool arguments"
                    
                    messages.append({
                        "role": "tool",
                        "tool_call_id": tool_call.id,
                        "content": content
                    })
                    
            except Exception as e:
                logger.error(f"Chat iteration {iteration + 1} failed: {e}")
                print(f"Error in conversation: {e}")
                break
    
    async def _list_tools(self, tools: List[Any]):
        """List available tools"""
        if tools:
            print("\n🔧 Available tools:")
            for tool in tools:
                print(f"  • {tool.name}: {tool.description}")
        else:
            print("No tools available")
    
    async def _list_prompts(self, prompts: List[Any]):
        """List available prompts"""
        if prompts:
            print("\n📝 Available prompts:")
            for prompt in prompts:
                args_info = f" (args: {', '.join(prompt.arguments)})" if hasattr(prompt, 'arguments') and prompt.arguments else ""
                print(f"  • {prompt.name}: {prompt.description}{args_info}")
        else:
            print("No prompts available")
    
    async def _get_prompt(self, name: str):
        """Get and display a specific prompt"""
        messages = await self.safe_prompt_get(name)
        if messages:
            print(f"\n📋 Prompt '{name}':")
            for msg in messages:
                print(f"\n{msg.role.upper()}:\n{msg.content}")
    
    def _to_openai_tool(self, mcp_tool) -> Dict[str, Any]:
        """Convert MCP tool to OpenAI format"""
        return {
            "type": "function",
            "function": {
                "name": mcp_tool.name,
                "description": mcp_tool.description,
                "parameters": mcp_tool.inputSchema
            }
        }

async def main():
    """Main entry point with proper error handling"""
    api_key = os.getenv("OPENAI_API_KEY")
    base_url = os.getenv("OPENAI_BASE_URL")
    
    if not api_key:
        print("❌ Set OPENAI_API_KEY environment variable")
        return
    
    client = MCPClient(api_key, base_url)
    server_cmd = os.getenv("MCP_SERVER_CMD", "python your_formatter_server.py").split()
    
    try:
        if await client.connect(server_cmd):
            await client.chat_loop()
    finally:
        await client.disconnect()

if __name__ == "__main__":
    asyncio.run(main())
