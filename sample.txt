import asyncio
import aiohttp
import json

async def list_tools_streaming():
    async with aiohttp.ClientSession() as session:
        # Connect to SSE stream
        async with session.get(
            "http://localhost:8000/mcp",
            headers={
                "Accept": "text/event-stream",
                "Cache-Control": "no-cache"
            }
        ) as response:
            
            if response.status != 200:
                print(f"Connection failed: {response.status}")
                return
            
            print("Connected to MCP SSE stream...")
            
            # Track what we've sent
            sent_init = False
            sent_tools = False
            
            async for line in response.content:
                line = line.decode('utf-8').strip()
                
                if not line or line.startswith(':'):
                    continue
                    
                if line.startswith('data: '):
                    try:
                        data = json.loads(line[6:])
                        print(f"Received: {data}")
                        
                        # Send initialize on first connection
                        if not sent_init:
                            init_request = {
                                "jsonrpc": "2.0",
                                "id": 1,
                                "method": "initialize",
                                "params": {
                                    "protocolVersion": "2024-11-05",
                                    "clientInfo": {"name": "streaming-client", "version": "1.0.0"}
                                }
                            }
                            # Send via POST to same endpoint
                            async with session.post("http://localhost:8000/mcp", json=init_request) as post_resp:
                                print(f"Sent initialize, status: {post_resp.status}")
                            sent_init = True
                        
                        # After initialize response, send tools/list
                        elif data.get("id") == 1 and "result" in data and not sent_tools:
                            tools_request = {
                                "jsonrpc": "2.0",
                                "id": 2,
                                "method": "tools/list",
                                "params": {}
                            }
                            async with session.post("http://localhost:8000/mcp", json=tools_request) as post_resp:
                                print(f"Sent tools/list, status: {post_resp.status}")
                            sent_tools = True
                        
                        # Handle tools/list response
                        elif data.get("id") == 2 and "result" in data:
                            tools = data.get("result", {}).get("tools", [])
                            print(f"\nAvailable tools ({len(tools)}):")
                            for tool in tools:
                                print(f"  - {tool['name']}: {tool.get('description', 'No description')}")
                            break
                            
                    except json.JSONDecodeError as e:
                        print(f"JSON decode error: {e}")
                        continue

if __name__ == "__main__":
    asyncio.run(list_tools_streaming())