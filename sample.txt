import asyncio
import aiohttp
import json
from typing import Dict, Any, Optional, List
from uuid import uuid4

class MCPStreamableHTTPClient:
    def __init__(self, url: str, headers: Optional[Dict[str, str]] = None):
        self.url = url
        self.headers = headers or {}
        self.session = None
        self.session_id = None
        self.request_id = 0
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def _send_request(self, method: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """Send a JSON-RPC request via Streamable HTTP"""
        self.request_id += 1
        
        request_data = {
            "jsonrpc": "2.0",
            "id": self.request_id,
            "method": method,
            "params": params or {}
        }
        
        headers = {
            "Content-Type": "application/json",
            **self.headers
        }
        
        # Add session ID if we have one
        if self.session_id:
            headers["mcp-session-id"] = self.session_id
        
        async with self.session.post(
            self.url,
            json=request_data,
            headers=headers
        ) as response:
            if response.status != 200:
                raise Exception(f"HTTP {response.status}: {await response.text()}")
            
            # Extract session ID from response headers for future requests
            if not self.session_id and "mcp-session-id" in response.headers:
                self.session_id = response.headers["mcp-session-id"]
            
            result = await response.json()
            if "error" in result:
                raise Exception(f"MCP Error: {result['error']}")
            
            return result.get("result", {})
    
    async def initialize(self):
        """Initialize the MCP connection"""
        return await self._send_request("initialize", {
            "protocolVersion": "2024-11-05",
            "capabilities": {
                "roots": {"listChanged": True},
                "sampling": {}
            },
            "clientInfo": {
                "name": "python-mcp-client",
                "version": "1.0.0"
            }
        })
    
    async def ping(self):
        """Ping the server"""
        return await self._send_request("ping")
    
    async def list_tools(self):
        """List available tools"""
        return await self._send_request("tools/list")
    
    async def list_resources(self):
        """List available resources"""
        return await self._send_request("resources/list")
    
    async def list_prompts(self):
        """List available prompts"""
        return await self._send_request("prompts/list")
    
    async def call_tool(self, name: str, arguments: Dict[str, Any]):
        """Call a tool"""
        return await self._send_request("tools/call", {
            "name": name,
            "arguments": arguments
        })

# Usage
async def main():
    async with MCPStreamableHTTPClient("https://your-server-url/mcp") as client:
        # Initialize first
        await client.initialize()
        
        # Then use the client
        await client.ping()
        tools = await client.list_tools()
        print(tools)

asyncio.run(main())