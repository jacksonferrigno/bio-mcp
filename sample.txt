
# test_basic.py
import pytest
import asyncio
import json
from mcp import ClientSession, StdioServerParameters

@pytest.mark.asyncio
async def test_server_connects():
    """Test we can connect to server"""
    server_params = StdioServerParameters(
        command="python",
        args=["your_server.py"]
    )
    
    async with ClientSession(server_params) as session:
        # If we get here, connection works
        assert True

@pytest.mark.asyncio 
async def test_can_get_schemas():
    """Test we can get schema list"""
    server_params = StdioServerParameters(
        command="python", 
        args=["your_server.py"]
    )
    
    async with ClientSession(server_params) as session:
        content = await session.read_resource("schema://list")
        schemas = json.loads(content.contents[0].text)
        
        # Just check it's not empty
        assert len(schemas["schemas"]) > 0

@pytest.mark.asyncio
async def test_can_call_tool():
    """Test we can call a schema tool"""
    server_params = StdioServerParameters(
        command="python",
        args=["your_server.py"]  
    )
    
    async with ClientSession(server_params) as session:
        # Get first tool name
        content = await session.read_resource("schema://list")
        schemas = json.loads(content.contents[0].text)
        first_tool = schemas["schemas"][0]["tool"]
        
        # Call it
        result = await session.call_tool(first_tool, {})
        
        # Just check we got something back
        assert result is not None
